orig_colnames = colnames(gtex)
colnames(gtex) = gsub('[^a-z0-9_]','_',tolower(colnames(gtex)))
brain_cols = colnames(gtex)[grepl('^brain',colnames(gtex))]
head(gtex[,1:3])
range(gtex[1:2500,3:25]) # 0 to 7739, so this appears to be raw tpm not log scale
gtex$brain_mean = apply(gtex[,brain_cols],1,FUN=mean)
head(gtex[,c(brain_cols,'brain_mean')])
sum(gtex$brain_mean > 10) # 7660
brain_expressed_genes_10tpm = data.frame(symbol=sort(unique(gtex[gtex$brain_mean > 10, 'description'])))
source('~/d/sci/src/exac_papers/exac_constants.R')
kstraint = load_constraint_data(reload=FALSE) # constraint is a SQLite keyword, so I call the table kstraint
kstraint$lof_obs_exp = kstraint$n_lof / kstraint$exp_lof
gpiaps = read.table('../gene_lists/lists/gpi_anchored.tsv',sep='\t',header=F)
colnames(gpiaps) = c('symbol')
gpiaps_empiric = read.table('data/gpi_anchored_empirical.tsv',sep='\t',header=F)
colnames(gpiaps_empiric) = c('symbol')
kstraint$gpiap = kstraint$gene %in% gpiaps$symbol
kstraint$gpiap_empiric = kstraint$gene %in% gpiaps_empiric$symbol
ctable = table(kstraint[,c('gpiap','gpiap_empiric')])
fisher.test(as.matrix(ctable), alternative='two.sided')
fisher.test(as.matrix(ctable), alternative='two.sided')$p.value
colnames(gtex)
colnames(kstraint)
h_breaks = 10^(seq(1,6,by=.25))
all_bp_hist = hist(kstraint$bp, breaks=h_breaks, plot=FALSE)
gpi_bp_hist = hist(kstraint$bp[kstraint$gene %in% gpiaps$symbol], breaks=h_breaks, plot=FALSE)
plot(all_bp_hist)
png('~/d/j/cureffi/media/2018/07/gpi-vs-all-length.png',width=800,height=500,res=150)
par(mar=c(4,5,4,5))
plot(all_bp_hist$mids, all_bp_hist$counts, type='h', lwd=40, lend=1, log='x', xlim=c(100, 10000), col='#77777788', xaxs='i', yaxs='i', ann=FALSE, axes=FALSE)
axis(side=1, at=10^(2:4))
axis(side=2, col='#777777', col.axis='#777777', at=(0:6)*1000, las=2, font=2)
par(new=TRUE)
plot(gpi_bp_hist$mids, gpi_bp_hist$counts, type='h', lwd=40, lend=1, log='x', xlim=c(100, 10000), col='#FF991288', xaxs='i', yaxs='i', ann=FALSE, axes=FALSE)
axis(side=4, col='#FF9912', col.axis='#FF9912', font=2, at=(0:5)*10, las=2)
mtext(side=1, line=2.5, text='coding sequence length (bp)')
mtext(side=2, line=3.0, text='count (all genes)', col='#777777', font=2)
mtext(side=4, line=2.5, text='count (GPI-anchored proteins)', col='#FF9912', font=2)
mtext(side=3, line=1, text='length distribution\nGPI-anchored proteins vs. all genes', font=2, cex=1.2)
dev.off()
ks.test(kstraint$bp[kstraint$gene %in% gpiaps$symbol], kstraint$bp[!(kstraint$gene %in% gpiaps$symbol)], alternative='two.sided')
mean(kstraint$bp[kstraint$gene %in% gpiaps$symbol])
mean(kstraint$bp[!(kstraint$gene %in% gpiaps$symbol)])
mean(kstraint$n_exons[kstraint$gene %in% gpiaps$symbol])
mean(kstraint$n_exons[!(kstraint$gene %in% gpiaps$symbol)])
sum(kstraint$n_exons[kstraint$gene %in% gpiaps$symbol]==1)
kstraint$gene[(kstraint$n_exons==1 & kstraint$gene %in% gpiaps$symbol)]
mean(kstraint$n_exons[kstraint$gene %in% gpiaps$symbol]==1)
mean(kstraint$n_exons[!(kstraint$gene %in% gpiaps$symbol)]==1)
ks.test(kstraint$lof_obs_exp[kstraint$gene %in% gpiaps$symbol], kstraint$lof_obs_exp[!(kstraint$gene %in% gpiaps$symbol)], alternative='two.sided')
mean(kstraint$lof_obs_exp[kstraint$gene %in% gpiaps$symbol])
mean(kstraint$lof_obs_exp[!(kstraint$gene %in% gpiaps$symbol)])
m = lm(lof_obs_exp ~ bp + gpiap, data=kstraint)
summary(m)
kstraint[kstraint$gpiap & kstraint$lof_obs_exp == 0 & kstraint$exp_lof > 10,]
kstraint[kstraint$gpiap & kstraint$lof_obs_exp >.9 & kstraint$exp_lof > 10,]
ks.test(gtex$brain_mean[gtex$description %in% gpiaps$symbol], gtex$brain_mean[!(gtex$description %in% gpiaps$symbol)], alternative='two.sided')
mean(gtex$brain_mean[gtex$description %in% gpiaps$symbol])
mean(gtex$brain_mean[!(gtex$description %in% gpiaps$symbol)])
mean(gtex$brain_mean[gtex$description %in% kstraint$gene & !(gtex$description %in% gpiaps$symbol)])
gtex$in_universe = gtex$description %in% kstraint$gene
gtex$expressed_in_brain = gtex$brain_mean > 10
gtex$gpiap = gtex$description %in% gpiaps$symbol
ctable = table(gtex[gtex$in_universe,c('expressed_in_brain','gpiap')]) # subset to kstraint$gene to match the "universe" these GPI-APs were required to be part of
fisher.test(as.matrix(ctable), alternative='two.sided')
gpiap_gtex_matrix = as.matrix(log10(gtex[gtex$gpiap,3:55]))
rownames(gpiap_gtex_matrix) = gtex$description[gtex$gpiap]
colnames(gpiap_gtex_matrix) = colnames(gtex)[3:55]
gpiap_gtex_matrix[gpiap_gtex_matrix < 0] = 0
gpiap_gtex_matrix[gpiap_gtex_matrix > 4] = 4
allzero_rows = which(rowSums(gpiap_gtex_matrix)==0)
gpiap_gtex_matrix = gpiap_gtex_matrix[-allzero_rows,]
colors = c('#fcfbfd','#efedf5','#dadaeb','#bcbddc','#9e9ac8','#807dba','#6a51a3','#4a1486')
png('~/d/j/cureffi/media/2018/07/gpi-gtex-heatmap.png',width=800,height=1600)
par(mar=c(12,1,3,5))
#heatmap.2(gpiap_gtex_matrix, dendrogram='none', Rowv=T, Colv=T, col=colors, trace='none')
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, legend_labels=0:4)
#, legend_labels=c('1 RPKM','10 RPKM','100 RPKM','1,000 RPKM', '10,000 RPKM'))
mtext(side=3, adj=1, text='log10(RPKM)')
dev.off()
ph$legend_breaks
dir(ph)
names(ph)
ph$gtable
$z
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55])
orig_colnames = readLines('data/GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_median_tpm.gct',sep='\t',skip=2)
orig_colnames = readLines('data/GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_median_tpm.gct',skip=2)
orig_colnames = read.table('data/GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_median_tpm.gct',sep='\t',header=F, skip=2)[1,]
orig_colnames
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55])
?heatmap
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55], margins=c(4,4,4,4))
?pheatmap
png('~/d/j/cureffi/media/2018/07/gpi-gtex-heatmap.png',width=800,height=1600)
#heatmap.2(gpiap_gtex_matrix, dendrogram='none', Rowv=T, Colv=T, col=colors, trace='none')
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55], margins=c(4,4,4,4))
#, legend_labels=c('1 RPKM','10 RPKM','100 RPKM','1,000 RPKM', '10,000 RPKM'))
dev.off()
pdf('~/d/j/cureffi/media/2018/07/gpi-gtex-heatmap.pdf',width=8,height=16)
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55], margins=c(4,4,4,4))
dev.off()
pdf('~/d/j/cureffi/media/2018/07/gpi-gtex-heatmap.pdf',width=8,height=16)
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55], margins=c(4,4,4,4))
dev.off()
pdf('~/d/j/cureffi/media/2018/07/gpi-gtex-heatmap.pdf',width=10,height=20)
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55], margins=c(4,4,4,4))
dev.off()
pdf('~/d/j/cureffi/media/2018/07/gpi-gtex-heatmap.pdf',width=10,height=20)
ph = pheatmap(gpiap_gtex_matrix, treeheight_row=0, treeheight_col=0, col=colors, border_color = NA, labels_col=orig_colnames[3:55])
dev.off()
75 - 42
# plot of PrPC expression vs incubation time
png('~/d/j/cureffi/media/2018/07/expression-level-incubation-time.png',width=800,height=400)
# data from Fischer 1996 PMID: 8635458 Table I
explevel = c(.5,1,3.5,6.5,10) # PrPC expression level
terminal = c(415,166,100,68,62) # time to terminal illness
symptoms = c(290,131,87,64,60) # time to symptoms
# empty plot and axes and labels
par(mar=c(4,4,3,2))
plot(NA,NA,xlim=c(0,11),ylim=c(0,500),axes=FALSE,xaxs='i',yaxs='i',ann=FALSE)
axis(side=1, at=0:10, labels=NA, lwd=1, lwd.ticks=1, tck=-0.025)
axis(side=1, at=1:10 - 0.5, labels=NA, lwd=0, lwd.ticks=0.5, tck=-0.0125)
axis(side=1, at=c(0,1,5,10), labels=c(0,1,5,10), lwd=0, lwd.ticks=0)
mtext(side=1, line=2.5, text='PrP expression level (relative to wild-type)', adj=0)
axis(side=2, at=(0:5)*100, lwd=0, lwd.ticks=1, las=2)
mtext(side=2, line=3, text='days post-infection')
# text annotations
par(xpd=TRUE)
text(x=c(0,0.5,1,5), y=c(600,490,300,150), labels=c('complete protection in homozygous knockouts','disease delayed in heterozygous knockouts','wild-type','disease accelerated in\ntransgenic overexpressers'), pos=c(4,4,4,3), cex=0.8)
segments(x0=0,x1=0.15,y0=525,y1=575)
segments(x0=0.5,x1=0.65,y0=415,y1=465)
segments(x0=1,x1=1.15,y0=166,y1=275)
segments(x0=5,x1=5,y0=80,y1=130)
# legend
legend(x=8,y=-120,c('time to death','time to onset'),col=c(tk,sk),text.col=c(tk,sk),bty='n',lwd=3,pch=19,cex=0.7,text.font=2)
par(xpd=FALSE)
# actual curves
tk = '#24AFB2'
sk = '#E67E23'
points(explevel,terminal,type='b',pch=19,lwd=3,col=tk)
points(explevel,symptoms,type='b',pch=19,lwd=3,col=sk)
points(c(.5,.2),c(415,600),type='l',lwd=3,col=tk,lty=3)
points(c(.5,.2),c(290,550),type='l',lwd=3,col=sk,lty=3)
dev.off()
# plot of PrPC expression vs incubation time
png('~/d/j/cureffi/media/2018/07/expression-level-incubation-time.png',width=800,height=400)
# colors
tk = '#24AFB2'
sk = '#E67E23'
# data from Fischer 1996 PMID: 8635458 Table I
explevel = c(.5,1,3.5,6.5,10) # PrPC expression level
terminal = c(415,166,100,68,62) # time to terminal illness
symptoms = c(290,131,87,64,60) # time to symptoms
# empty plot and axes and labels
par(mar=c(4,4,3,2))
plot(NA,NA,xlim=c(0,11),ylim=c(0,500),axes=FALSE,xaxs='i',yaxs='i',ann=FALSE)
axis(side=1, at=0:10, labels=NA, lwd=1, lwd.ticks=1, tck=-0.025)
axis(side=1, at=1:10 - 0.5, labels=NA, lwd=0, lwd.ticks=0.5, tck=-0.0125)
axis(side=1, at=c(0,1,5,10), labels=c(0,1,5,10), lwd=0, lwd.ticks=0)
mtext(side=1, line=2.5, text='PrP expression level (relative to wild-type)', adj=0)
axis(side=2, at=(0:5)*100, lwd=0, lwd.ticks=1, las=2)
mtext(side=2, line=3, text='days post-infection')
# text annotations
par(xpd=TRUE)
text(x=c(0,0.5,1,5), y=c(600,490,300,150), labels=c('complete protection in homozygous knockouts','disease delayed in heterozygous knockouts','wild-type','disease accelerated in\ntransgenic overexpressers'), pos=c(4,4,4,3), cex=0.8)
segments(x0=0,x1=0.15,y0=525,y1=575)
segments(x0=0.5,x1=0.65,y0=415,y1=465)
segments(x0=1,x1=1.15,y0=166,y1=275)
segments(x0=5,x1=5,y0=80,y1=130)
# legend
legend(x=8,y=-120,c('time to death','time to onset'),col=c(tk,sk),text.col=c(tk,sk),bty='n',lwd=3,pch=19,cex=0.7,text.font=2)
par(xpd=FALSE)
# actual curves
points(explevel,terminal,type='b',pch=19,lwd=3,col=tk)
points(explevel,symptoms,type='b',pch=19,lwd=3,col=sk)
points(c(.5,.2),c(415,600),type='l',lwd=3,col=tk,lty=3)
points(c(.5,.2),c(290,550),type='l',lwd=3,col=sk,lty=3)
dev.off()
# plot of PrPC expression vs incubation time
png('~/d/j/cureffi/media/2018/07/expression-level-incubation-time.png',width=800,height=400,res=150)
# colors
tk = '#24AFB2'
sk = '#E67E23'
# data from Fischer 1996 PMID: 8635458 Table I
explevel = c(.5,1,3.5,6.5,10) # PrPC expression level
terminal = c(415,166,100,68,62) # time to terminal illness
symptoms = c(290,131,87,64,60) # time to symptoms
# empty plot and axes and labels
par(mar=c(4,4,3,2))
plot(NA,NA,xlim=c(0,11),ylim=c(0,500),axes=FALSE,xaxs='i',yaxs='i',ann=FALSE)
axis(side=1, at=0:10, labels=NA, lwd=1, lwd.ticks=1, tck=-0.025)
axis(side=1, at=1:10 - 0.5, labels=NA, lwd=0, lwd.ticks=0.5, tck=-0.0125)
axis(side=1, at=c(0,1,5,10), labels=c(0,1,5,10), lwd=0, lwd.ticks=0)
mtext(side=1, line=2.5, text='PrP expression level (relative to wild-type)', adj=0)
axis(side=2, at=(0:5)*100, lwd=0, lwd.ticks=1, las=2)
mtext(side=2, line=3, text='days post-infection')
# text annotations
par(xpd=TRUE)
text(x=c(0,0.5,1,5), y=c(600,490,300,150), labels=c('complete protection in homozygous knockouts','disease delayed in heterozygous knockouts','wild-type','disease accelerated in\ntransgenic overexpressers'), pos=c(4,4,4,3), cex=0.8)
segments(x0=0,x1=0.15,y0=525,y1=575)
segments(x0=0.5,x1=0.65,y0=415,y1=465)
segments(x0=1,x1=1.15,y0=166,y1=275)
segments(x0=5,x1=5,y0=80,y1=130)
# legend
legend(x=8,y=-120,c('time to death','time to onset'),col=c(tk,sk),text.col=c(tk,sk),bty='n',lwd=3,pch=19,cex=0.7,text.font=2)
par(xpd=FALSE)
# actual curves
points(explevel,terminal,type='b',pch=19,lwd=3,col=tk)
points(explevel,symptoms,type='b',pch=19,lwd=3,col=sk)
points(c(.5,.2),c(415,600),type='l',lwd=3,col=tk,lty=3)
points(c(.5,.2),c(290,550),type='l',lwd=3,col=sk,lty=3)
dev.off()
# plot of PrPC expression vs incubation time
png('~/d/j/cureffi/media/2018/07/expression-level-incubation-time.png',width=800,height=400,res=120)
# colors
tk = '#24AFB2'
sk = '#E67E23'
# data from Fischer 1996 PMID: 8635458 Table I
explevel = c(.5,1,3.5,6.5,10) # PrPC expression level
terminal = c(415,166,100,68,62) # time to terminal illness
symptoms = c(290,131,87,64,60) # time to symptoms
# empty plot and axes and labels
par(mar=c(4,4,3,2))
plot(NA,NA,xlim=c(0,11),ylim=c(0,500),axes=FALSE,xaxs='i',yaxs='i',ann=FALSE)
axis(side=1, at=0:10, labels=NA, lwd=1, lwd.ticks=1, tck=-0.025)
axis(side=1, at=1:10 - 0.5, labels=NA, lwd=0, lwd.ticks=0.5, tck=-0.0125)
axis(side=1, at=c(0,1,5,10), labels=c(0,1,5,10), lwd=0, lwd.ticks=0)
mtext(side=1, line=2.5, text='PrP expression level (relative to wild-type)', adj=0)
axis(side=2, at=(0:5)*100, lwd=0, lwd.ticks=1, las=2)
mtext(side=2, line=3, text='days post-infection')
# text annotations
par(xpd=TRUE)
text(x=c(0,0.5,1,5), y=c(600,490,300,150), labels=c('complete protection in homozygous knockouts','disease delayed in heterozygous knockouts','wild-type','disease accelerated in\ntransgenic overexpressers'), pos=c(4,4,4,3), cex=0.8)
segments(x0=0,x1=0.15,y0=525,y1=575)
segments(x0=0.5,x1=0.65,y0=415,y1=465)
segments(x0=1,x1=1.15,y0=166,y1=275)
segments(x0=5,x1=5,y0=80,y1=130)
# legend
legend(x=8,y=-120,c('time to death','time to onset'),col=c(tk,sk),text.col=c(tk,sk),bty='n',lwd=3,pch=19,cex=0.7,text.font=2)
par(xpd=FALSE)
# actual curves
points(explevel,terminal,type='b',pch=19,lwd=3,col=tk)
points(explevel,symptoms,type='b',pch=19,lwd=3,col=sk)
points(c(.5,.2),c(415,600),type='l',lwd=3,col=tk,lty=3)
points(c(.5,.2),c(290,550),type='l',lwd=3,col=sk,lty=3)
dev.off()
# plot of PrPC expression vs incubation time
png('~/d/j/cureffi/media/2018/07/expression-level-incubation-time.png',width=800,height=400,res=135)
# colors
tk = '#24AFB2'
sk = '#E67E23'
# data from Fischer 1996 PMID: 8635458 Table I
explevel = c(.5,1,3.5,6.5,10) # PrPC expression level
terminal = c(415,166,100,68,62) # time to terminal illness
symptoms = c(290,131,87,64,60) # time to symptoms
# empty plot and axes and labels
par(mar=c(4,4,3,2))
plot(NA,NA,xlim=c(0,11),ylim=c(0,500),axes=FALSE,xaxs='i',yaxs='i',ann=FALSE)
axis(side=1, at=0:10, labels=NA, lwd=1, lwd.ticks=1, tck=-0.025)
axis(side=1, at=1:10 - 0.5, labels=NA, lwd=0, lwd.ticks=0.5, tck=-0.0125)
axis(side=1, at=c(0,1,5,10), labels=c(0,1,5,10), lwd=0, lwd.ticks=0)
mtext(side=1, line=2.5, text='PrP expression level (relative to wild-type)', adj=0)
axis(side=2, at=(0:5)*100, lwd=0, lwd.ticks=1, las=2)
mtext(side=2, line=3, text='days post-infection')
# text annotations
par(xpd=TRUE)
text(x=c(0,0.5,1,5), y=c(600,490,300,150), labels=c('complete protection in homozygous knockouts','disease delayed in heterozygous knockouts','wild-type','disease accelerated in\ntransgenic overexpressers'), pos=c(4,4,4,3), cex=0.8)
segments(x0=0,x1=0.15,y0=525,y1=575)
segments(x0=0.5,x1=0.65,y0=415,y1=465)
segments(x0=1,x1=1.15,y0=166,y1=275)
segments(x0=5,x1=5,y0=80,y1=130)
# legend
legend(x=8,y=-120,c('time to death','time to onset'),col=c(tk,sk),text.col=c(tk,sk),bty='n',lwd=3,pch=19,cex=0.7,text.font=2)
par(xpd=FALSE)
# actual curves
points(explevel,terminal,type='b',pch=19,lwd=3,col=tk)
points(explevel,symptoms,type='b',pch=19,lwd=3,col=sk)
points(c(.5,.2),c(415,600),type='l',lwd=3,col=tk,lty=3)
points(c(.5,.2),c(290,550),type='l',lwd=3,col=sk,lty=3)
dev.off()
options(stringsAsFactors=FALSE)
library(reshape2)
library(sqldf)
setwd('~/d/sci/src/csf_prp_quantification/')
# see http://seananderson.ca/courses/11-multipanel/multipanel.pdf
# use layout() to create unequal size/shape multipanels
expand_range = function(x, by=.5) {
return ( c(min(x)-by,max(x)+by) )
}
percent = function(proportion,digits=2) {
return ( gsub(' ','',paste(formatC(proportion*100, digits=digits, format='fg'),"%",sep="") ) )
}
cv = function(x) sd(x)/mean(x)
col25 = '#FF2016'
col50 = '#0001CD'
col100 = '#777777'
csfcol = '#0001CD' # default
samples = read.table('data/samples/samples.tsv',sep='\t',header=TRUE,quote='',comment.char='')
plates = read.table('data/elisa/meta/plates.tsv',sep='\t',header=TRUE)
plates = plates[-which(plates$plate=='6_alt'),] # remove the re-scan of plate 6 done to compare platereaders
plates$plateno = as.integer(plates$plate)
if (exists('elisa')) {
rm(elisa)
}
for (plate in plates$plateno) {
filename = paste('data/elisa/processed/',formatC(plate,width=2,flag='0'),'_summary.tsv',sep='')
if (file.exists(filename)) {
temp = read.table(filename,sep='\t',header=TRUE,quote='',comment.char='')
temp$plate = plate
if (all(is.na(temp$flag))) {
temp$flag = '' # when all are blank, it reads them as NA which is annoying, so fix it here.
}
if (exists('elisa')) {
elisa = rbind(elisa,temp)
} else {
elisa = temp
}
}
}
prp_plates = plates
prp_plates$reader = ''
prp_plates$reader[grepl('\\.txt',prp_plates$datafile,ignore.case=TRUE)] = 'SpectraMax'
prp_plates$reader[grepl('\\.csv',prp_plates$datafile,ignore.case=TRUE)] = 'Fluostar Optima'
colnames(elisa)[2:4] = c('prp_ngml', 'prp_se', 'prp_flag')
elisa$prp_flag[is.na(elisa$prp_flag)] = ''
# delete data from failed experiments that were later re-run
elisa = elisa[-which(elisa$plate==3 & elisa$sample %in% samples$id),]
# raw well-by-well values in elisa
if (exists('elisa_raw')) {
rm(elisa_raw)
}
for (plate in plates$plateno) {
filename = paste('data/elisa/processed/',formatC(plate,width=2,flag='0'),'.tsv',sep='')
if (file.exists(filename)) {
temp = read.table(filename,sep='\t',header=TRUE,quote='',comment.char='')
temp$plate = plate
if (exists('elisa_raw')) {
elisa_raw = rbind(elisa_raw,temp)
} else {
elisa_raw = temp
}
}
}
plates = read.table('data/dc/meta/plates.tsv',sep='\t',header=TRUE)
rm(dc)
for (plate in plates$plateno) {
filename = paste('data/dc/processed/',formatC(plate,width=2,flag='0'),'_summary.tsv',sep='')
if (file.exists(filename)) {
temp = read.table(filename,sep='\t',header=TRUE,quote='',comment.char='')
temp$plate = plate
if (exists('dc')) {
dc = rbind(dc,temp)
} else {
dc = temp
}
}
}
dc$flag[is.na(dc$flag)] = ''
plates = read.table('data/hb/meta/plates.tsv',sep='\t',header=TRUE)
rm(hb)
for (plate in plates$plateno) {
filename = paste('data/hb/processed/',formatC(plate,width=2,flag='0'),'_summary.tsv',sep='')
if (file.exists(filename)) {
temp = read.table(filename,sep='\t',header=TRUE,quote='',comment.char='')
temp$plate = plate
if (exists('hb')) {
hb = rbind(hb,temp)
} else {
hb = temp
}
}
}
hb$flag[is.na(hb$flag)] = ''
# delete data from dilutions we did outside the normal [LLQ, ULQ] range to see how high v1187.3 was, since
# these can't be plotted with the other data
hb = hb[-which(hb$sample=='v1187.3' & hb$plate==6),]
# in case you need to inspect number of distinct plates on which a sample appears
# sqldf("
# select   sample, count(*) n
# from     elisa
# where    sample in (select id from samples)
# group by sample
# order by 2 desc
# ;")
# table with best estimates of everything for each sample
data = data.frame(sample=unique(elisa$sample))
data$prp_ngml = as.numeric(NA)
data$prp_flag = ''
for (i in 1:nrow(data)) {
this_sample = data$sample[i]
# Handle PrP ELISA
if (all(elisa$prp_flag[elisa$sample==this_sample] == 'LLQ')) {
data$prp_flag[i] = 'LLQ'
data$prp_ngml[i] = min(elisa$prp_ngml[elisa$sample==this_sample])
data$prp_se[i] = 0
} else if (all(elisa$prp_flag[elisa$sample==this_sample] == 'ULQ')) {
data$prp_flag[i] = 'ULQ'
data$prp_ngml[i] = max(elisa$prp_ngml[elisa$sample==this_sample])
data$prp_se[i] = 0
} else {
data$prp_flag[i] = ''
data$prp_ngml[i] = mean(elisa$prp_ngml[elisa$sample==this_sample & elisa$prp_flag==''])
# this next line - taking mean of the SEs - probably isn't the best way to do this, but this affects
# very few samples
data$prp_se[i] = mean(elisa$prp_se[elisa$sample==this_sample & elisa$prp_flag==''])
}
# Handle hb
if (this_sample %in% hb$sample) {
if (all(hb$flag[hb$sample==this_sample] == 'LLQ')) {
data$hb_flag[i] = 'LLQ'
data$hb_ngml[i] = min(hb$ngml_av[hb$sample==this_sample])
} else if (all(hb$flag[hb$sample==this_sample] == 'ULQ')) {
data$hb_flag[i] = 'ULQ'
data$hb_ngml[i] = max(hb$ngml_av[hb$sample==this_sample])
} else {
data$hb_flag[i] = ''
data$hb_ngml[i] = mean(hb$ngml_av[hb$sample==this_sample & hb$flag==''])
}
} else {
data$hb_flag[i] = ''
data$hb_ngml[i] = NA
}
# Handle dc
if (this_sample %in% dc$sample) {
if (all(dc$flag[dc$sample==this_sample] == 'LLQ')) {
data$dc_flag[i] = 'LLQ'
data$dc_mgml[i] = min(dc$mgml_av[dc$sample==this_sample])
} else if (all(dc$flag[dc$sample==this_sample] == 'ULQ')) {
data$dc_flag[i] = 'ULQ'
data$dc_mgml[i] = max(dc$mgml_av[dc$sample==this_sample])
} else {
data$dc_flag[i] = ''
data$dc_mgml[i] = mean(dc$mgml_av[dc$sample==this_sample & dc$flag==''])
}
} else {
data$dc_flag[i] = ''
data$dc_mgml[i] = NA
}
}
data$prion_category = samples$prion_category[match(data$sample, samples$id)]
data$bftype = samples$bftype[match(data$sample, samples$id)]
data$sample_source = samples$sample_source[match(data$sample, samples$id)]
# make a CSF table for analysis
csf = subset(data, !is.na(bftype) & bftype == 'CSF')
# overwrite data from outside the normal [LLQ, ULQ] range for each assay -- for a handful of samples
# that were at the LLQ or ULQ, we re-did the assay at different dilutions just to see, but if you include
# these observations, then it's not a fair comparison as not all the samples have been treated equally,
# plus you can't include them all on a plot
prp_llq = 1 * 10
prp_ulq = 20 * 50
hb_llq = .82 * 10
hb_ulq = 200 * 100
dc_llq = .1
dc_ulq = 1.6
csf$prp_ngml[csf$prp_ngml < prp_llq] = prp_llq
csf$prp_flag[csf$prp_ngml <= prp_llq] = 'LLQ'
csf$prp_ngml[csf$prp_ngml > prp_ulq] = prp_ulq
csf$prp_flag[csf$prp_ngml >= prp_ulq] = 'ULQ'
csf$hb_ngml[csf$hb_ngml < hb_llq & !is.na(csf$hb_ngml)] = hb_llq
csf$hb_flag[csf$hb_ngml <= hb_llq & !is.na(csf$hb_ngml)] = 'LLQ'
csf$hb_ngml[csf$hb_ngml > hb_ulq & !is.na(csf$hb_ngml)] = hb_ulq
csf$hb_flag[csf$hb_ngml >= hb_ulq & !is.na(csf$hb_ngml)] = 'ULQ'
csf$dc_mgml[csf$dc_mgml < dc_llq & !is.na(csf$dc_mgml)] = dc_llq
csf$dc_flag[csf$dc_mgml <= dc_llq & !is.na(csf$dc_mgml)] = 'LLQ'
csf$dc_mgml[csf$dc_mgml > dc_ulq & !is.na(csf$dc_mgml)] = dc_ulq
csf$dc_flag[csf$dc_mgml >= dc_ulq & !is.na(csf$dc_mgml)] = 'ULQ'
# add some +/- 1.96SE columns for ease of plotting later
csf$prp_l95 = csf$prp_ngml - 1.96*csf$prp_se
csf$prp_u95 = csf$prp_ngml + 1.96*csf$prp_se
mean(csf$dc_mgml)
sd(csf$dc_mgml)
sum(!is.na(csf$dc_mgml))
0.48 * 30
50 * 1
50 /14.4
sd(csf$prp_ngml)
mean(csf$prp_ngml)
1.5 / 30
126 / 4
3800 / 40
2500000 / 25
2.6 - .36
3.6 - .36
0.36 + 3.24 + 9.9 + 0.9
30 /50
16 / 208
80 * 454/200
80 * 454/200 / 3
40 * 454/200 / 3
30 * 454/200 / 3
60 * 454/200
Sys.Date() - as.Date('2018-02-28')
105 _ 9
105 + 9
as.Date('2018-06-22') - as.Date('2018-02-28')
proportion_a_bound = function (atot, btot, kd) {
# quadratic formula per htta://structbio.vanderbilt.edu/chazin/wisdom/kdcalc.htm
ab1 = ((atot + btot + kd) + sqrt((atot + btot + kd)^2 - 4 * atot * btot)) / 2
ab2 = ((atot + btot + kd) - sqrt((atot + btot + kd)^2 - 4 * atot * btot)) / 2
pab1 = ab1 / atot
pab2 = ab2 / atot
# pick the one that is between 0 and 1 as only that makes sense
answer = c(pab1, pab2)[which(c(pab1, pab2) > 0 & c(pab1, pab2) < 1)]
return (answer)
}
proportion_a_bound(1e-5,1e-5,1e-5)
proportion_a_bound(1e-5,1e-4,1e-5)
proportion_a_bound(3e-5,1e-4,1e-5)
proportion_a_bound(3e-5,1e-4,1e-6)
173 * 2
187.96 + 263.96 + 172.20*2
